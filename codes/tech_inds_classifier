#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  2 12:52:36 2021

@author: ben

"""
# imports
import requests
import bs4 as bs
import numpy as np
import pandas_datareader as pdr
import pandas as pd

# collecting S&P 100 tickers
wiki = requests.get('https://en.wikipedia.org/wiki/S%26P_100')
content = wiki.content
soup = bs.BeautifulSoup(content, 'lxml')
soup = soup.find('table',{'class':'wikitable sortable'})
tickers = np.array([])

for rows in soup.findAll('tr')[1:]:
    ticker = rows.findAll('td')[0].text.strip()
    tickers = np.append(tickers, ticker)

data = pd.DataFrame();
extra_data=pd.DataFrame();
missing_data = []
#get price data
# =============================================================================
# for ticker in tickers:
#     try:
#         price_data = pdr.get_data_yahoo(ticker, start="2010-01-01", end='2019-12-31')
#         price_data['ticker'] = ticker
#         data = data.append(price_data)
#     except:
#         missing_data.append(ticker)
# =============================================================================

price_data = pdr.get_data_yahoo('AAPL', start="2010-01-01", end='2019-12-31')
price_data['ticker'] = 'AAPL'
data = data.append(price_data)
# create technical indicators
print(data)
data['10 day'] = data.groupby('ticker')['Close'].pct_change(periods=10) # 10 day price change
data['5 day'] = data.groupby('ticker')['Close'].pct_change(periods=5)   # 5 day price change 

data['sma15'] = data.groupby('ticker')['Close'].transform(lambda x: x.rolling(window=10).mean()) # Simple moving average

for i in data['ticker'].unique():
    data.loc[data.ticker==i, 'ema15']= data.Close.ewm(span=15, adjust=False).mean()     # Exponential moving average


data['middleband'] = data.groupby('ticker')['Close'].transform(lambda x: x.rolling(window=20).mean())   # middle bollinger band
extra_data['SD'] = data.groupby('ticker')['Close'].transform(lambda x: x.rolling(window=20).std())
data['upperband'] = data['middleband'] + 2*extra_data['SD']                                             # upper bollinger band
data['lowerband'] = data['middleband'] - 2*extra_data['SD']                                             # lower bollinger band
print(data)